{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat_internal-hubot/hubot.coffee","meteor://ðŸ’»app/packages/rocketchat_internal-hubot/settings.coffee"],"names":[],"mappings":"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","file":"/packages/rocketchat_internal-hubot.js","sourcesContent":["CoffeeScript = Npm.require('coffee-script')\nCoffeeScript.register()\n\nHubot = Npm.require('hubot')\n\nfs = Npm.require('fs')\npath = Npm.require('path')\n\n# Start a hubot, connected to our chat room.\n# 'use strict'\n\n# Log messages?\nDEBUG = false\n\n# Monkey-patch Hubot to support private messages\nHubot.Response::priv = (strings...) ->\n\t@robot.adapter.priv @envelope, strings...\n\n# More monkey-patching\nHubot.Robot::loadAdapter = -> # disable\n\n# grrrr, Meteor.bindEnvironment doesn't preserve `this` apparently\nbind = (f) ->\n\tg = Meteor.bindEnvironment (self, args...) -> f.apply(self, args)\n\t(args...) -> g @, args...\n\nclass Robot extends Hubot.Robot\n\tconstructor: (args...) ->\n\t\tsuper args...\n\t\t@hear = bind @hear\n\t\t@respond = bind @respond\n\t\t@enter = bind @enter\n\t\t@leave = bind @leave\n\t\t@topic = bind @topic\n\t\t@error = bind @error\n\t\t@catchAll = bind @catchAll\n\t\t@user = Meteor.users.findOne {username: @name}, fields: username: 1\n\tloadAdapter: -> false\n\thear:    (regex, callback) -> super regex, Meteor.bindEnvironment callback\n\trespond: (regex, callback) -> super regex, Meteor.bindEnvironment callback\n\tenter: (callback) -> super Meteor.bindEnvironment(callback)\n\tleave: (callback) -> super Meteor.bindEnvironment(callback)\n\ttopic: (callback) -> super Meteor.bindEnvironment(callback)\n\terror: (callback) -> super Meteor.bindEnvironment(callback)\n\tcatchAll: (callback) -> super Meteor.bindEnvironment(callback)\n\nclass RocketChatAdapter extends Hubot.Adapter\n\t# Public: Raw method for sending data back to the chat source. Extend this.\n\t#\n\t# envelope - A Object with message, room and user details.\n\t# strings  - One or more Strings for each message to send.\n\t#\n\t# Returns nothing.\n\tsend: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> send'.blue\n\t\t# console.log envelope, strings\n\t\tsendHelper @robot, envelope, strings, (string) =>\n\t\t\tconsole.log \"send #{envelope.room}: #{string} (#{envelope.user.id})\" if DEBUG\n\t\t\tRocketChat.sendMessage InternalHubot.user, { msg: string }, { _id: envelope.room }\n\n\t# Public: Raw method for sending emote data back to the chat source.\n\t#\n\t# envelope - A Object with message, room and user details.\n\t# strings  - One or more Strings for each message to send.\n\t#\n\t# Returns nothing.\n\temote: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> emote'.blue\n\t\tsendHelper @robot, envelope, strings, (string) =>\n\t\t\tconsole.log \"emote #{envelope.rid}: #{string} (#{envelope.u.username})\" if DEBUG\n\t\t\treturn @priv envelope, \"*** #{string} ***\" if envelope.message.private\n\t\t\tMeteor.call \"sendMessage\",\n\t\t\t\tmsg: string\n\t\t\t\trid: envelope.rid\n\t\t\t\taction: true\n\n\t# Priv: our extension -- send a PM to user\n\tpriv: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> priv'.blue\n\t\tsendHelper @robot, envelope, strings, (string) ->\n\t\t\tconsole.log \"priv #{envelope.room}: #{string} (#{envelope.user.id})\" if DEBUG\n\t\t\tMeteor.call \"sendMessage\",\n\t\t\t\tu:\n\t\t\t\t\tusername: \"rocketbot\"\n\t\t\t\tto: \"#{envelope.user.id}\"\n\t\t\t\tmsg: string\n\t\t\t\trid: envelope.room\n\n\t# Public: Raw method for building a reply and sending it back to the chat\n\t# source. Extend this.\n\t#\n\t# envelope - A Object with message, room and user details.\n\t# strings  - One or more Strings for each reply to send.\n\t#\n\t# Returns nothing.\n\treply: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> reply'.blue\n\t\tif envelope.message.private\n\t\t\t@priv envelope, strings...\n\t\telse\n\t\t\t@send envelope, strings.map((str) -> \"#{envelope.user.name}: #{str}\")...\n\n\t# Public: Raw method for setting a topic on the chat source. Extend this.\n\t#\n\t# envelope - A Object with message, room and user details.\n\t# strings  - One more more Strings to set as the topic.\n\t#\n\t# Returns nothing.\n\ttopic: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> topic'.blue\n\n\t# Public: Raw method for playing a sound in the chat source. Extend this.\n\t#\n\t# envelope - A Object with message, room and user details.\n\t# strings  - One or more strings for each play message to send.\n\t#\n\t# Returns nothing\n\tplay: (envelope, strings...) ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> play'.blue\n\n\t# Public: Raw method for invoking the bot to run. Extend this.\n\t#\n\t# Returns nothing.\n\trun: ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> run'.blue\n\t\t@robot.emit 'connected'\n\t\t@robot.brain.mergeData {}\n\t\t# @robot.brain.emit 'loaded'\n\n\t# Public: Raw method for shutting the bot down. Extend this.\n\t#\n\t# Returns nothing.\n\tclose: ->\n\t\tconsole.log 'ROCKETCHATADAPTER -> close'.blue\n\nclass InternalHubotReceiver\n\tconstructor: (message) ->\n\t\t#console.log message\n\t\tif message.u.username isnt InternalHubot.name\n\t\t\troom = RocketChat.models.Rooms.findOneById message.rid\n\n\t\t\tif room.t is 'c'\n\t\t\t\tconsole.log message\n\t\t\t\tInternalHubotUser = new Hubot.User(message.u.username, room: message.rid)\n\t\t\t\tInternalHubotTextMessage = new Hubot.TextMessage(InternalHubotUser, message.msg, message._id)\n\t\t\t\tInternalHubot.adapter.receive InternalHubotTextMessage\n\t\treturn message\n\nclass HubotScripts\n\tconstructor: (robot) ->\n\t\tmodulesToLoad = [\n\t\t\t'hubot-help/src/help.coffee'\n\t\t]\n\n\t\tfor modulePath in modulesToLoad\n\t\t\ttry\n\t\t\t\tNpm.require(modulePath)(robot)\n\t\t\t\trobot.parseHelp __meteor_bootstrap__.serverDir+'/npm/rocketchat_internal-hubot/node_modules/'+modulePath\n\t\t\t\tconsole.log \"Loaded #{modulePath}\".green\n\t\t\tcatch e\n\t\t\t\tconsole.log \"can't load #{modulePath}\".red\n\t\t\t\tconsole.log e\n\n\t\tscriptsToLoad = RocketChat.settings.get('InternalHubot_ScriptsToLoad').split(',') or []\n\n\t\tfor scriptFile in scriptsToLoad\n\t\t\ttry\n\t\t\t\tscriptFile = s.trim(scriptFile)\n\n\t\t\t\tNpm.require('hubot-scripts/src/scripts/'+scriptFile)(robot)\n\t\t\t\t# robot.loadFile __meteor_bootstrap__.serverDir+'/npm/rocketchat_internal-hubot/node_modules/hubot-scripts/src/scripts', scriptFile\n\t\t\t\trobot.parseHelp __meteor_bootstrap__.serverDir+'/npm/rocketchat_internal-hubot/node_modules/hubot-scripts/src/scripts/'+scriptFile\n\t\t\t\tconsole.log \"Loaded #{scriptFile}\".green\n\t\t\tcatch e\n\t\t\t\tconsole.log \"can't load #{scriptFile}\".red\n\t\t\t\tconsole.log e\n\n\t\t# console.log __meteor_bootstrap__.serverDir\n\n\t\t# npm/rocketchat_internal-hubot/node_modules\n\t\t# packages/rocketchat_internal-hubot.js\n\n\t\t# # load all scripts in scripts/\n\t\t# console.log path.resolve '.'\n\t\t# scriptPath = path.resolve __dirname, 'scripts'\n\t\t# console.log scriptPath\n\t\t# for file in fs.readdirSync(scriptPath)\n\t\t# \tcontinue unless /\\.(coffee|js)$/.test(file)\n\t\t# \trobot.loadFile scriptPath, file\n\n\t\t# return\n\t\t# # load all scripts from hubot-scripts\n\t\t# scriptPath = path.resolve __dirname, 'node_modules', 'hubot-scripts', 'src', 'scripts'\n\t\t# scripts = require './hubot-scripts.json'\n\t\t# robot.loadHubotScripts scriptPath, scripts\n\t\t# robot.parseHelp path.join scriptPath, 'meme_captain.coffee'\n\n\t\t# # load all hubot-* modules from package.json\n\t\t# packageJson = require './package.json'\n\t\t# pkgs = (pkg for own pkg, version of packageJson.dependencies when !/^(coffee-script|hubot-scripts|hubot-help)$/.test(pkg))\n\t\t# pkgs.forEach (p) -> (require p)(robot)\n\n\t\t# # A special hack for hubot-help: ensure it replies via pm\n\t\t# privRobot = Object.create robot\n\t\t# privRobot.respond = (regex, cb) ->\n\t\t# \trobot.respond regex, (resp) ->\n\t\t# \t\tresp.message.private = true\n\t\t# \t\tcb(resp)\n\t\t# (require 'hubot-help')(privRobot)\n\n\t\t# # A special hack for meme_captain: change its \"respond\" invocations to \"hear\" so that it memes everywhere.\n\t\t# memecaptain = require './node_modules/hubot-scripts/src/scripts/meme_captain'\n\t\t# memecaptain\n\t\t# \trespond: (regex, cb) ->\n\t\t# \t\trobot.hear regex, (msg) ->\n\t\t# \t\t\tcb(msg) if msg.envelope.room is 'general/0' or /^\\s*[@]?(rocket)?bot\\b/i.test(msg.message.text)\n\nsendHelper = Meteor.bindEnvironment (robot, envelope, strings, map) ->\n\twhile strings.length > 0\n\t\tstring = strings.shift()\n\t\tif typeof(string) == 'function'\n\t\t\tstring()\n\t\telse\n\t\t\ttry\n\t\t\t\tmap(string)\n\t\t\tcatch err\n\t\t\t\tconsole.error \"Hubot error: #{err}\" if DEBUG\n\t\t\t\trobot.logger.error \"RocketChat send error: #{err}\"\n\nInternalHubot = {}\n\ninit = =>\n\tInternalHubot = new Robot null, null, false, RocketChat.settings.get 'InternalHubot_Username'\n\tInternalHubot.alias = 'bot'\n\tInternalHubot.adapter = new RocketChatAdapter InternalHubot\n\tHubotScripts(InternalHubot)\n\tInternalHubot.run()\n\n\t# InternalHubot.hear /^test/i, (res) ->\n\t#\tres.send \"Test? TESTING? WE DON'T NEED NO TEST, EVERYTHING WORKS!\"\n\n\tif RocketChat.settings.get 'InternalHubot_Enabled'\n\t\tRocketChat.callbacks.add 'afterSaveMessage', InternalHubotReceiver, RocketChat.callbacks.priority.LOW, 'InternalHubot'\n\telse\n\t\tRocketChat.callbacks.remove 'afterSaveMessage', 'InternalHubot'\n\n\t# Meteor.startup ->\n\t\t# console.log InternalHubot;\n\t\t# # what's (the regexp for) my name?\n\t\t# robot.respond /(?:)/, -> false\n\t\t# mynameRE = robot.listeners.pop().regex\n\t\t# # register scripts\n\t\t# HubotScripts(robot)\n\t\t# Object.keys(share.hubot).forEach (scriptName) ->\n\t\t# \tconsole.log \"Loading hubot script: #{scriptName}\"\n\t\t# \tshare.hubot[scriptName](robot)\n\t\t# # register our nick\n\t\t# n = Meteor.call 'newNick', {name: 'rocketbot'}\n\t\t# Meteor.call 'setTag', {type:'nicks', object:n._id, name:'Gravatar', value:'rocket@printf.net', who:n.canon}\n\t\t# # register our presence in general chat\n\t\t# keepalive = -> Meteor.call 'setPresence',\n\t\t# \tu:\n\t\t# \t\tusername: 'rocketbot'\n\t\t# \trid: 'GENERAL'\n\t\t# \tpresent: true\n\t\t# \tforeground: true\n\t\t# keepalive()\n\t\t# Meteor.setInterval keepalive, 30*1000 # every 30s refresh presence\n\t\t# # listen to the chat room, ignoring messages sent before we startup\n\t\t# startup = true\n\t\t# ChatMessage.find({}).observe\n\t\t# \tadded: (message) ->\n\t\t# \t\treturn if startup\n\t\t# \t\treturn if message.u.username is \"rocketbot\" or message.u.username is \"\"\n\t\t# \t\treturn if message.system or message.action or message.oplog or message.bodyIsHtml\n\t\t# \t\tconsole.log \"Received from #{message.u.username} in #{message.rid}: #{message.body}\"\\\n\t\t# \t\t\tif DEBUG\n\t\t# \t\tuser = new Hubot.User(message.u.username, room: message.rid)\n\t\t# \t\ttm = new Hubot.TextMessage(user, message.body, message._id)\n\t\t# \t\ttm.private = message.to?\n\t\t# \t\t# if private, ensure it's treated as a direct address\n\t\t# \t\tif tm.private and not mynameRE.test(tm.text)\n\t\t# \t\t\ttm.text = \"#{robot.name} #{tm.text}\"\n\t\t# \t\tadapter.receive tm\n\t\t# startup = false\n\t\t# Meteor.call \"sendMessage\",\n\t\t# \trid: 'GENERAL'\n\t\t# \tmsg: 'wakes up'\n\t\t# \tu:\n\t\t# \t\tusername: \"rocketbot\"\n\t\t# \taction: true\n\nMeteor.startup ->\n\tinit()\n\tRocketChat.models.Settings.findByIds([ 'InternalHubot_Username', 'InternalHubot_Enabled', 'InternalHubot_ScriptsToLoad']).observe\n\t\tchanged: ->\n\t\t\tinit()\n","RocketChat.settings.addGroup 'InternalHubot'\nRocketChat.settings.add 'InternalHubot_Enabled', true, { type: 'boolean', group: 'InternalHubot', i18nLabel: 'Enabled' }\nRocketChat.settings.add 'InternalHubot_Username', 'Rocket.Cat', { type: 'string', group: 'InternalHubot', i18nLabel: 'Username', i18nDescription: 'InternalHubot_Username_Description' }\nRocketChat.settings.add 'InternalHubot_ScriptsToLoad', 'hello.coffee,zen.coffee', { type: 'string', group: 'InternalHubot'}\n"]}